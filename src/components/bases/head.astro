---
import "inter-ui/inter.css";
import "@styles/globals.css";
import { ViewTransitions } from "astro:transitions";
import type { Meta } from "@lib/types";
import defaulltImage from "@assets/images/news-placeholder.jpg";

type Props = Meta;
const {
  title,
  description,
  og_image,
  og_image_alt,
  og_type,
  no_follow,
  no_index,
  published_at,
  modified_at,
  article_author,
  article_section,
  tags,
} = Astro.props;

const OGImage = new URL(og_image ? og_image : defaulltImage.src, Astro.url);
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<head>
  <!-- Global Metadata -->
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content={Astro.generator} />

  <!-- Favicons -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

  <!-- Canonical URL -->
  <link rel="canonical" href={canonicalURL} />

  <!-- Primary Meta Tags -->
  <title>{title}</title>
  <meta name="title" content={title} />
  <meta name="description" content="Astro description" />
  <meta name="keywords" content="Astro, JavaScript, Astro.js" />

  <!-- Robots metadata -->
  <meta name="robots" content={no_index ? "noindex" : "index"} />
  <meta name="robots" content={no_follow ? "nofollow" : "follow"} />

  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website" />
  <meta property="og:url" content={Astro.url} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={OGImage} />
  <meta property="og:image:alt" content={og_image_alt} />

  <!-- Twitter -->
  <meta property="twitter:site" content={Astro.site} />
  <meta property="twitter:card" content="summary_large_image" />
  <meta property="twitter:url" content={Astro.url} />
  <meta property="twitter:title" content={title} />
  <meta property="twitter:description" content={description} />
  <meta property="twitter:image" content={OGImage} />
  <meta property="twitter:image:alt" content={og_image_alt} />

  {
    og_type === "article" && (
      <>
        <meta
          property="article:published_time"
          content={
            published_at ? new Date(published_at).toISOString() : undefined
          }
        />
        <meta property="article:modified_time" content={modified_at} />
        <meta property="article:author" content={article_author} />
        <meta property="article:section" content={article_section} />
        {tags && tags.length > 0 && (
          <meta
            property="article:tag"
            content={tags.map((tag) => tag.path).join(",")}
          />
        )}
      </>
    )
  }

  <!-- View Transitions -->
  <ViewTransitions />
</head>
