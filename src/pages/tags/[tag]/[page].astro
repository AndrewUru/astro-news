---
import type { GetStaticPaths } from "astro";

export const getStaticPaths = (async ({ paginate }) => {
  const allTags = ["red", "blue", "green"];
  const allPosts = await Astro.glob("./posts/*.md");

  // Generate pages from our array of astronauts, with 2 to a page
  return allTags.flatMap((tag) => {
    const filteredPosts = allPosts.filter(
      (post) => post.frontmatter.tag === tag
    );
    return paginate(filteredPosts, {
      params: { tag },
      pageSize: 2,
      props: { posts: filteredPosts },
    });
  });
}) satisfies GetStaticPaths;

// All paginated data is passed on the "page" prop
const { page, posts } = Astro.props;
const params = Astro.params;
---

<pre>{JSON.stringify(page, null, 2)}</pre>
<ul>
  <li>
    {page.data.map(({ astronaut }) => <li>{astronaut.title}</li>)}
  </li>
</ul>
<nav aria-label="Pagination">
  <ul class="pagination">
    {
      page.currentPage > 1 && (
        <li>
          <a
            href={`/tags/red/${page.currentPage - 1}`}
            aria-label="Previous page"
          >
            Previous
          </a>
        </li>
      )
    }

    {
      Array.from({ length: page.lastPage }, (_, i) => i + 1).map((page) => (
        <li>
          <a
            href={`/tags/red/${page}`}
            aria-current={page === page.currentPage ? "page" : undefined}
            class={page === page.currentPage ? "active" : ""}
          >
            {page}
          </a>
        </li>
      ))
    }

    {
      page.currentPage < page.lastPage && (
        <li>
          <a href={page.url.next} aria-label="Next page">
            Next
          </a>
        </li>
      )
    }
  </ul>
</nav>

<style>
  .pagination {
    display: flex;
    list-style-type: none;
    padding: 0;
  }

  .pagination li {
    margin: 0 5px;
  }

  .pagination a {
    text-decoration: none;
    padding: 5px 10px;
    border: 1px solid #ccc;
    border-radius: 3px;
  }

  .pagination a.active {
    background-color: #007bff;
    color: white;
  }
</style>
